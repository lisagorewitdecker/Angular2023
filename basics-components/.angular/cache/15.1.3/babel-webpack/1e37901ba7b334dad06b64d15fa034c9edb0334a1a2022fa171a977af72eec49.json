{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { NavigationStart } from '@angular/router';\nimport { AlertType } from './alert.model';\nlet AlertComponent = class AlertComponent {\n  constructor(router, alertService) {\n    this.router = router;\n    this.alertService = alertService;\n    this.id = 'default-alert';\n    this.fade = true;\n    this.alerts = [];\n  }\n  ngOnInit() {\n    // subscribe to new alert notifications\n    this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        // filter out alerts without 'keepAfterRouteChange' flag\n        this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n        // remove 'keepAfterRouteChange' flag on the rest\n        this.alerts.forEach(x => delete x.keepAfterRouteChange);\n        return;\n      }\n      // add alert to array\n      this.alerts.push(alert);\n      // auto close alert if required\n      if (alert.autoClose) {\n        setTimeout(() => this.removeAlert(alert), 3000);\n      }\n    });\n    // clear alerts on location change\n    this.routeSubscription = this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.alertService.clear(this.id);\n      }\n    });\n  }\n  ngOnDestroy() {\n    // unsubscribe to avoid memory leaks\n    this.alertSubscription.unsubscribe();\n    this.routeSubscription.unsubscribe();\n  }\n  removeAlert(alert) {\n    // check if already removed to prevent error on auto close\n    if (!this.alerts.includes(alert)) return;\n    // fade out alert if this.fade === true\n    const timeout = this.fade ? 250 : 0;\n    alert.fade = this.fade;\n    setTimeout(() => {\n      // filter alert out of array\n      this.alerts = this.alerts.filter(x => x !== alert);\n    }, timeout);\n  }\n  cssClass(alert) {\n    if (!alert) return;\n    const classes = ['alert', 'alert-dismissible'];\n    const alertTypeClass = {\n      [AlertType.Success]: 'alert-success',\n      [AlertType.Error]: 'alert-danger',\n      [AlertType.Info]: 'alert-info',\n      [AlertType.Warning]: 'alert-warning'\n    };\n    if (alert.type !== undefined) {\n      classes.push(alertTypeClass[alert.type]);\n    }\n    if (alert.fade) {\n      classes.push('fade');\n    }\n    return classes.join(' ');\n  }\n};\n__decorate([Input()], AlertComponent.prototype, \"id\", void 0);\n__decorate([Input()], AlertComponent.prototype, \"fade\", void 0);\nAlertComponent = __decorate([Component({\n  selector: 'alert',\n  templateUrl: 'alert.component.html'\n})], AlertComponent);\nexport { AlertComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","NavigationStart","AlertType","AlertComponent","constructor","router","alertService","ngOnInit","alertSubscription","onAlert","id","subscribe","alert","message","alerts","filter","x","keepAfterRouteChange","forEach","push","autoClose","setTimeout","removeAlert","routeSubscription","events","event","clear","ngOnDestroy","unsubscribe","includes","timeout","fade","cssClass","classes","alertTypeClass","Success","Error","Info","Warning","type","undefined","join","__decorate","selector","templateUrl"],"sourceRoot":"","sources":["/Users/lisa/lisagorewitdecker/basics-components/src/app/_alert/alert.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { Alert, AlertType } from './alert.model';\nimport { AlertService } from './alert.service';\n\n@Component({ selector: 'alert', templateUrl: 'alert.component.html' })\nexport class AlertComponent implements OnInit, OnDestroy {\n  @Input() id = 'default-alert';\n  @Input() fade = true;\n\n  alerts: Alert[] = [];\n  alertSubscription!: Subscription;\n  routeSubscription!: Subscription;\n\n  constructor(private router: Router, private alertService: AlertService) { }\n\n  ngOnInit() {\n    // subscribe to new alert notifications\n    this.alertSubscription = this.alertService.onAlert(this.id)\n      .subscribe(alert => {\n        // clear alerts when an empty alert is received\n        if (!alert.message) {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n\n          // remove 'keepAfterRouteChange' flag on the rest\n          this.alerts.forEach(x => delete x.keepAfterRouteChange);\n          return;\n        }\n\n        // add alert to array\n        this.alerts.push(alert);\n\n        // auto close alert if required\n        if (alert.autoClose) {\n          setTimeout(() => this.removeAlert(alert), 3000);\n        }\n      });\n\n    // clear alerts on location change\n    this.routeSubscription = this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.alertService.clear(this.id);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    // unsubscribe to avoid memory leaks\n    this.alertSubscription.unsubscribe();\n    this.routeSubscription.unsubscribe();\n  }\n\n  removeAlert(alert: Alert) {\n    // check if already removed to prevent error on auto close\n    if (!this.alerts.includes(alert)) return;\n\n    // fade out alert if this.fade === true\n    const timeout = this.fade ? 250 : 0;\n    alert.fade = this.fade;\n\n    setTimeout(() => {\n      // filter alert out of array\n      this.alerts = this.alerts.filter(x => x !== alert);\n    }, timeout);\n  }\n\n  cssClass(alert: Alert) {\n    if (!alert) return;\n\n    const classes = ['alert', 'alert-dismissible'];\n\n    const alertTypeClass = {\n      [AlertType.Success]: 'alert-success',\n      [AlertType.Error]: 'alert-danger',\n      [AlertType.Info]: 'alert-info',\n      [AlertType.Warning]: 'alert-warning'\n    }\n\n    if (alert.type !== undefined) {\n      classes.push(alertTypeClass[alert.type]);\n    }\n\n    if (alert.fade) {\n      classes.push('fade');\n    }\n\n    return classes.join(' ');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
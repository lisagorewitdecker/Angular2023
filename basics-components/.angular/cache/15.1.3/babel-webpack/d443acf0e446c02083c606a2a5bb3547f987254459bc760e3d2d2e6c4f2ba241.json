{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Alert, AlertType } from './alert.model';\nimport * as i0 from \"@angular/core\";\nexport class AlertService {\n  constructor() {\n    this.subject = new Subject();\n    this.defaultId = 'default-alert';\n  }\n  // enable subscribing to alerts observable\n  onAlert(id = this.defaultId) {\n    return this.subject.asObservable().pipe(filter(x => x && x.id === id));\n  }\n  // convenience methods\n  success(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Success,\n      message\n    }));\n  }\n  error(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Error,\n      message\n    }));\n  }\n  info(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Info,\n      message\n    }));\n  }\n  warn(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Warning,\n      message\n    }));\n  }\n  // main alert method\n  alert(alert) {\n    alert.id = alert.id || this.defaultId;\n    this.subject.next(alert);\n  }\n  // clear alerts\n  clear(id = this.defaultId) {\n    this.subject.next(new Alert({\n      id\n    }));\n  }\n}\nAlertService.ɵfac = function AlertService_Factory(t) {\n  return new (t || AlertService)();\n};\nAlertService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AlertService,\n  factory: AlertService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,OAAO,QAAQ,MAAM;AAC1C,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,SAASC,KAAK,EAAEC,SAAS,QAAsB,eAAe;;AAG9D,OAAM,MAAOC,YAAY;EADzBC;IAEU,YAAO,GAAG,IAAIL,OAAO,EAAS;IAC9B,cAAS,GAAG,eAAe;;EAEnC;EACAM,OAAO,CAACC,EAAE,GAAG,IAAI,CAACC,SAAS;IACzB,OAAO,IAAI,CAACC,OAAO,CAACC,YAAY,EAAE,CAACC,IAAI,CAACV,MAAM,CAACW,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC,CAAC;EACxE;EAEA;EACAM,OAAO,CAACC,OAAe,EAAEC,OAAsB;IAC7C,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACe,OAAO;MAAEJ;IAAO,CAAE,CAAC,CAAC;EACzE;EAEAK,KAAK,CAACL,OAAe,EAAEC,OAAsB;IAC3C,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACiB,KAAK;MAAEN;IAAO,CAAE,CAAC,CAAC;EACvE;EAEAO,IAAI,CAACP,OAAe,EAAEC,OAAsB;IAC1C,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACmB,IAAI;MAAER;IAAO,CAAE,CAAC,CAAC;EACtE;EAEAS,IAAI,CAACT,OAAe,EAAEC,OAAsB;IAC1C,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACqB,OAAO;MAAEV;IAAO,CAAE,CAAC,CAAC;EACzE;EAEA;EACAE,KAAK,CAACA,KAAY;IAChBA,KAAK,CAACT,EAAE,GAAGS,KAAK,CAACT,EAAE,IAAI,IAAI,CAACC,SAAS;IACrC,IAAI,CAACC,OAAO,CAACgB,IAAI,CAACT,KAAK,CAAC;EAC1B;EAEA;EACAU,KAAK,CAACnB,EAAE,GAAG,IAAI,CAACC,SAAS;IACvB,IAAI,CAACC,OAAO,CAACgB,IAAI,CAAC,IAAIvB,KAAK,CAAC;MAAEK;IAAE,CAAE,CAAC,CAAC;EACtC;;AAnCWH,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAuB,SAAZvB,YAAY;EAAAwB,YADC;AAAM","names":["Subject","filter","Alert","AlertType","AlertService","constructor","onAlert","id","defaultId","subject","asObservable","pipe","x","success","message","options","alert","type","Success","error","Error","info","Info","warn","Warning","next","clear","factory","providedIn"],"sourceRoot":"","sources":["/Users/lisa/lisagorewitdecker/basics-components/src/app/_alert/alert.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Alert, AlertType, AlertOptions } from './alert.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AlertService {\n  private subject = new Subject<Alert>();\n  private defaultId = 'default-alert';\n\n  // enable subscribing to alerts observable\n  onAlert(id = this.defaultId): Observable<Alert> {\n    return this.subject.asObservable().pipe(filter(x => x && x.id === id));\n  }\n\n  // convenience methods\n  success(message: string, options?: AlertOptions) {\n    this.alert(new Alert({ ...options, type: AlertType.Success, message }));\n  }\n\n  error(message: string, options?: AlertOptions) {\n    this.alert(new Alert({ ...options, type: AlertType.Error, message }));\n  }\n\n  info(message: string, options?: AlertOptions) {\n    this.alert(new Alert({ ...options, type: AlertType.Info, message }));\n  }\n\n  warn(message: string, options?: AlertOptions) {\n    this.alert(new Alert({ ...options, type: AlertType.Warning, message }));\n  }\n\n  // main alert method\n  alert(alert: Alert) {\n    alert.id = alert.id || this.defaultId;\n    this.subject.next(alert);\n  }\n\n  // clear alerts\n  clear(id = this.defaultId) {\n    this.subject.next(new Alert({ id }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}